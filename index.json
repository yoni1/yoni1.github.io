[{"content":"[פוסט זה התפרסם במקור בפייסבוק.]\nיאללה, code review לציוץ של צה\u0026quot;ל.\n בשורה 1 רצוי שה-if יהיה while כדי שהתגובה תקרה תמיד ולא רק במתקפה הראשונה. בשורות 3-5 עדיף להשתמש ב-consts במקום במחרוזות קסם בגוף הקוד. בשורות 3-5 עדיף להחליף את הקוד בקוד יותר גנרי שיאפשר לתמוך בעוד מתקפות בעתיד בלי צורך לשנות את הקוד ולקמפל מחדש. זה לא \u0026ldquo;פיצוח של הקוד\u0026rdquo; אלא פשוט חשיפת הקוד אם כביכול זה הקוד שצה\u0026quot;ל מריץ ואתם צה\u0026quot;ל. נראה שהקוד כתוב בסי-שארפ שהיא שפה שרצה ברוב המקרים על Windows ולעיתים רחוקות מאוד על גנרלים צבאיים ולכן רוב הסיכויים שסי-שארפ אינה השפה המתאימה ביותר למשימה. הקונפליקט הישראלי-פלסטיני די מסובך וככל הנראה לא ניתן לייצג אותו בצורה נאמנה באמצעות 12 שורות קוד. יתר על כן, יתכן שאם אתם צבא מאורגן של מדינה מסודרת אז להתבדח עם בדיחת קוד גרועה על קונפליקט שבו אנשים פאקינג מתים במשך שנים לצורך איסוף לייקים בטוויטר זה איפשהו בין מביך למחליא. שימוש באופרטור \u0026amp;\u0026amp; במקום || בשורות 3-4.  ","description":" ","id":0,"section":"posts","tags":["from facebook","the media is stupid","בעברית"],"title":"Code Review לציוץ של צה\"ל","uri":"https://shorts.yonispants.com/posts/idf-tweet-cr/"},{"content":"I\u0026rsquo;ve just discovered something amazing in C (it also works in C++).\nSince C comments cannot be nested, you can use /*/ to toggle \u0026ldquo;comment-mode\u0026rdquo;: The compiler will parse it as /* + / the first time and / + */ the second time.\n1 2 3 4 5  not_a_comment(); /*/ This is a comment. /*/ not_a_comment();   It is obvious and stupid and amazing.\n","description":"The little-known token: /*/","id":1,"section":"posts","tags":["c"],"title":"Comment toggle in C","uri":"https://shorts.yonispants.com/posts/comment-toggle-in-c/"},{"content":"In the Facebook group Mathematical Mathematics Memes, someone posted:\n Tell me your area of specialization by writing a poem containing what you studied.\n In the past, I\u0026rsquo;ve tried and failed to come up with a succint summary of my thesis for lol my thesis. But my poem seemed to be popular:\n Roses are red\nViolets are blue\nA random eigenfunction of the Laplacian on the flat torus of dimension $d$ with eigenvalue $\\lambda$ asymptotically has an expected value of $O(\\lambda^d)$ nodal domains as $\\lambda$ tends to infinity with exponentially concentrated probability distribution\nAnd so do you\n Note - the poem is not mathematically accurate, but it is close enough for all practical purposes.\n","description":" ","id":2,"section":"posts","tags":["my thesis","from facebook"],"title":"A Poem About My Thesis","uri":"https://shorts.yonispants.com/posts/a-poem-about-my-thesis/"},{"content":"For this blog, I chose Hugo. The reason I chose Hugo is that that\u0026rsquo;s what Shay Nehmad is using. 🤷\nHugo is a static site generator, which means the site is not served by a server which runs code (like Wordpress) - instead, it\u0026rsquo;s served by a server which serves static files only. I write new posts in Markdown format, and then I use Hugo to rebuild the site.\nIn my experience, using Hugo is not as straightforward as using traditional blogging platforms (like Wordpress), and you do need to have some coding experience. I\u0026rsquo;ve had to learn some things about how Hugo works in order to develop this blog. I\u0026rsquo;ve even learned about Git submodules! 😁\nI got started by reading Shay\u0026rsquo;s post, \u0026ldquo;How to Build This Blog\u0026rdquo;. Then, I looked at Hugo\u0026rsquo;s theme library, and chose the theme Zzo.\nIn Hugo, you are kind of married to the theme you choose. Once I chose Zzo, I had to set up a lot of Zzo-specific configuration. Besides reading the documentation of the theme and of Hugo itself, another trick that proved useful was to look at the templates/partials themselves (in the Zzo source code) to figure out what site element is controlled by what configuration.\nIn addition to configuration, I\u0026rsquo;ve had to change some behavior / fix bugs in Zzo itself. To do this, I\u0026rsquo;ve forked the Zzo repo, made the changes there, and opened a few pull requests to contribute the fixes back upstream. I\u0026rsquo;ve detailed an example below:\n\u0026ldquo;Reading time\u0026rdquo; as \u0026ldquo;Shorts Size\u0026rdquo; By default, Zzo shows the reading time like this:\n ☕ 5 min read\n Instead of this, suppose that we want to have:\n 🩳 Size M\n Step 1: Finding where things are Even without knowing anything about the code, we know that the string \u0026quot;min read\u0026quot; must be referenced somewhere. Looking for it in the entire source code of the theme, we find it in the file i18n/en.toml:\n1 2  [reading-time] other = \u0026#34;min read\u0026#34;   This tells us it\u0026rsquo;d be a good idea to search for \u0026quot;reading-time\u0026quot;, and indeed, we find it in 4 places:\n layouts/partials/body/infos.html layouts/partials/summary/card.html layouts/partials/summary/classic.html layouts/partials/summary/compact.html  These 4 places correspond to all four ways that the reading time may be shown: Inside a page, or in 3 different styles of page summaries.\nStep 2: Fixing the theme The code which refers to \u0026quot;reading-time\u0026quot; looks like this:\n{{ .ReadingTime }} {{ i18n \u0026quot;reading-time\u0026quot; }}\rWe see that it is hardcoded in the template that the number appears before the string. That\u0026rsquo;s no good for us - we want the number to be a parameter for the \u0026quot;reading-time\u0026quot; string. Fortunately, Hugo can do this - and it is even a standard example in the documentation. Basically, you pass it as a parameter like this:\n{{ i18n \u0026quot;reading-time\u0026quot; .ReadingTime }}\rAnd modify the i18n string like this:\n1 2  [reading-time] other = \u0026#34;{{ .Count }} min read\u0026#34;   With this knowledge, I made the necessary changes and submitted a pull request.\nBy the way, while we\u0026rsquo;re looking at these partials, we can see where the ☕ emoji comes from:\n{{ ($.Site.Params.readingTimeIcon | safeHTML) | default \u0026quot;☕\u0026quot; }}\rThis indicates we can control the emoji by changing the readingTimeIcon site configuration, which indeed appears in Zzo\u0026rsquo;s sample params.toml file.\nStep 3: Defining the string After reading some more documentation (this time it\u0026rsquo;s of Go\u0026rsquo;s template package), I was ready to define the string. To do this, I had to define my own i18n/en.toml. The way Hugo works is it evaluates the site\u0026rsquo;s files first, and at the theme\u0026rsquo;s files afterwards; so I just created this path and file in the root of my site.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  [tooltip-reading-time] other = \u0026#34;Shorts Size\u0026#34; [reading-time] other = \u0026#34;Size \\ {{ if eq .Count 1 }} \\ XS \\ {{ else if eq .Count 2 3 }} \\ S \\ {{ else if eq .Count 4 5 6 }} \\ M \\ {{ else if eq .Count 7 8 9 10 }} \\ L \\ {{ else }} \\ XL \\ {{ end }}\u0026#34;   And that\u0026rsquo;s it - this finally achieves what we wanted.\n","description":"How I built this blog using Hugo.","id":3,"section":"posts","tags":["yoni's shorts","hugo"],"title":"How to Build This Blog","uri":"https://shorts.yonispants.com/posts/how-to-build-this-blog/"},{"content":"Hello, world. Starting a new blog today!\nWhy blog?  I already publish a bunch of stuff on my Facebook profile, and wished that my posts get a home of their own. I feel like it. I had an unsuccessful Wordpress blog in 2007-2008, and want to try to make it better this time.  What blog? I plan on posting:\n Math stuff. Programming \u0026amp; technology stuff. Projects and stuff. Stuff I\u0026rsquo;ll copy from my past posts on Facebook.  Arbitrarily, some posts will be in English, and some in Hebrew.\nHow blog? For this blog, I chose Hugo. The reason I chose Hugo is that that\u0026rsquo;s what Shay Nehmad is using. 🤷\nI\u0026rsquo;ll write more about it in my next post.\n","description":"Hello, world. Starting a new blog today!","id":4,"section":"posts","tags":["yoni's shorts","hugo"],"title":"Hello, world","uri":"https://shorts.yonispants.com/posts/hello/"},{"content":"[פוסט זה התפרסם במקור בפייסבוק.]\nחג שמח! היום היה החג המקראי הידוע \u0026ldquo;שמינית עצרת\u0026rdquo; (אוקי, אני יודע, במקור זה שמיני עצרת, אבל \u0026ldquo;שמיני עצרת\u0026rdquo; זה גם חסר משמעות מתמטית וגם, בואו נודה באמת, דקדוקית).\nלרגל החג, חשבתי שאכתוב פוסט על האם אפשר לתת משמעות מתמטית לביטוי \u0026ldquo;שמינית עצרת\u0026rdquo;? ואם כן - כמה זה יוצא?\nהפוסט דורש רקע בחדו\u0026quot;א (חדו\u0026quot;א 1 וחדו\u0026quot;א 2 אמורים להספיק).\nחלק 1: מה זה עצרת, תזכיר לי? עצרת היא פעולה מתמטית שלמדנו עליה מתישהו ביסודי. זו פעולה אונארית (כלומר, פעולה על מספר אחד, בניגוד למשל לפעולת הכפל שבה מכפילים שני מספרים), המסומנת בסימן קריאה.\nלמשל, הסימון ‪$4!$‬ מציין את פעולת העצרת על המספר 4, וקוראים את זה \u0026ldquo;ארבע עצרת\u0026rdquo;.\nפעולת העצרת מוגדרת על המספרים הטבעיים על ידי מכפלת כל המספרים מ-1 עד המספר (ועבור אפס, בתור \u0026ldquo;המכפלה הריקה\u0026rdquo; שערכה פשוט 1; דרך אגב, בפוסט הזה, \u0026ldquo;מספרים טבעיים\u0026rdquo; כוללים את אפס).\nבמילים אחרות:\n$$\r‪\\begin{aligned}\r1! \u0026= 1‬ \\\\\r‪2! \u0026= 1 \\cdot 2 = 2‬ \\\\\r‪3! \u0026= 1 \\cdot 2 \\cdot 3 = 6‬ \\\\\r\u0026 \\vdots\r\\end{aligned}\r$$\rומוסיפים גם $0! = 1$.\nכדי לחשב את \u0026ldquo;שמינית עצרת\u0026rdquo;, אנחנו צריכים להרחיב או להכליל את מושג העצרת, כך שנוכל לחשב גם עצרת של מספרים לא שלמים. האם זה אפשרי? איך עושים את זה?\nחלק 2: אז מה אנחנו מחפשים בדרכנו לשמינית עצרת? בעצם, אנחנו מחפשים פונקציה, נקרא לה $f(x)$‬, שמוגדרת עבור מספרים ממשיים - אך בואו נקל על עצמנו, ונדרוש רק שתהיה מוגדרת עבור $x \\ge 0$ - המקיימת:\n$$\r\\begin{aligned}\rf(0) \u0026= 0! \\\\\rf(1) \u0026= 1! \\\\\r\u0026 \\vdots \\\\\rf(n) \u0026= n!\r\\end{aligned}\r$$\rכלומר, פונקציה ממשית, \u0026ldquo;שמסכימה\u0026rdquo; עם העצרת בכל מספר טבעי, \u0026ldquo;ומשלימה\u0026rdquo; את ההגדרה שלה במספרים לא טבעיים.\nחלק 3: רעיונות ראשונים כמובן, יש המון דרכים שאפשר לחשוב עליהן איך עושים את ההשלמה הזו, ובכל דרך מקבלים פונקציה קצת אחרת. הנה כמה דרכים שטבעי לחשוב עליהן:\n פונקציה שמעגלת למטה למספר טבעי ואז מחשבת עצרת:\n פונקציה שמבצעת אינטרפולציה לינארית בין שתי העצרות הקרובות ביותר:\n פונקציה שמבצעת אינטרפולציה ריבועית (quadratic spline) בין שתי העצרות הקרובות ביותר, כאשר בקטע הראשון מתחילים עם קו ישר ($y = 1$) ואחר כך מתקדמים ימינה כאשר בכל קטע חדש קובעים את הערך השמאלי, הערך הימני, והנגזרת בקצה השמאלי:\n  חלק 4: למה הרעיונות הראשונים לא טובים האם אחת מהפונקציות הנ\u0026quot;ל ראויה להיות הפונקציה שמכלילה את העצרת לממשיים? אני חושב שלא, כי יש להן כמה בעיות:\n  הפונקציה הראשונה לא רציפה.\n  הפונקציה השנייה רציפה! אך היא לא גזירה.\n  הפונקציה השלישית רציפה וגזירה! אך היא לא גזירה פעמיים.\n  בכל הפונקציות, נדרשת נוסחה חדשה לכל קטע.\n  אנו מחפשים, אם כן, פונקציה כמה שיותר יפה ואלגנטית - אם אפשר לבקש, שתהיה לה נוסחה אחידה ולא חלוקה למקרים, ואם אפשר עוד לבקש, שתהיה גזירה אינסוף פעמים.\nפונקציה כזו תהיה המועמדת שלנו להכללה של עצרת לממשיים.\nחלק 5: פונקציית גמא \u0026ldquo;פונקציית גמא\u0026rdquo; ($\\Gamma$) (\u0026hellip;של אוילר. איך לא?) מוגדרת בתור הפונקציה הבאה:\nעבור $x \u0026gt; 0$ (שימו לב, גדול ממש, לא גדול-שווה):\n$$\r\\Gamma (x) = \\int_0^\\infty \\mathrm{e}^{-t} t^{x-1} \\,\\mathrm{d} t $$\rשימו לב: נוצר פה כאילו עוד משתנה $t$ בנוסף ל-$x$, אבל $t$ הוא משתנה האינטגרציה.\nכאן $x$ \u0026ldquo;מגיע מבחוץ\u0026rdquo; בתור הפרמטר של $\\Gamma$, והוא \u0026ldquo;קבוע\u0026rdquo; בתוך האינטגרל. כלומר, עבור כל ערך של $x$, מחשבים אינטגרל כדי לקבל את $\\Gamma$ בנקודה זו.\nהאם הפונקציה בכלל מוגדרת? עבור כל $x \u0026gt; 0$ \u0026ldquo;ספציפי\u0026rdquo;, צריך לבדוק שהאינטגרל \u0026ldquo;בסדר\u0026rdquo;:\nה-\u0026ldquo;בעיות\u0026rdquo; של האינטגרנד הן אך ורק בגבולות. ב-$t = 0$, האקספוננט נראה כמו 1 והגורם השני ידוע כאינטגרבילי; וב-‪$t = \\infty$‬, האקספוננט דועך הרבה יותר מהר משהגורם השני גדל.\nלכן האינטגרל \u0026ldquo;בסדר\u0026rdquo; והפונקציה לפחות\u0026hellip; מוגדרת.\nחלק 6: הוכחה שפונקציית גמא מכלילה את העצרת כמה זה $\\Gamma(1)$‬? כאשר מציבים $x = 1$, מקבלים:\n$$\r\\Gamma(1) = \\int_0^\\infty \\mathrm{e}^{-t} \\,\\mathrm{d}t\r$$\rוזה יוצא 1 (תרגיל קל).\nוכמה זה ‪$\\Gamma(2)$‬? כאשר מציבים $x = 2$, מקבלים:\n$$\r\\Gamma(2) = \\int_0^\\infty \\mathrm{e}^{-t} t \\,\\mathrm{d}t\r$$\rעל ידי אינטגרציה בחלקים ($u=t, v'=\\mathrm{e}^{-t} \\rightarrow u'=1, v=-\\mathrm{e}^{-t}$) מקבלים:\n$$\r\\Gamma(2) = \\left. -t \\mathrm{e}^{-t} \\right|_0^\\infty + \\int_0^\\infty \\mathrm{e}^{-t} \\,\\mathrm{d}t\r$$\rומכאן אפשר לחשב שוב בקלות ולקבל $\\Gamma(2)=1$.\nהיי, השיטה הזו של אינטגרציה בחלקים עבדה טוב! האם אנחנו יכולים להמשיך אותה???\nאכן!!!\nיהי $n$ מספר טבעי. נחשב את $\\Gamma(n+1)$:\n$$\r\\Gamma(n+1) = \\int_0^\\infty \\mathrm{e}^{-t} t^n \\,\\mathrm{d}t\r$$\rעל ידי אינטגרציה בחלקים ($u=t^n, v'=\\mathrm{e}^{-t} \\rightarrow u'=nt^{n-1}, v=-\\mathrm{e}^{-t}$) מקבלים:\n$$\r\\Gamma(n+1) = \\left. -t^n \\mathrm{e}^{-t} \\right|_0^\\infty + \\int_0^\\infty nt^{n-1} \\mathrm{e}^{-t} \\,\\mathrm{d}t\r$$\rהמחובר הראשון מתאפס, והמחובר השני שוב נראה כמו פונקציית גמא (עם פקטור $n$)! כלומר, קיבלנו:\n$$\r\\Gamma(n+1) = n \\Gamma(n)\r$$\rולכן, יחד עם החישוב שלנו של $\\Gamma(1)$, נוכל מיידית לקבל באינדוקציה: לכל $n \\ge 1$ טבעי,\n$$\r\\Gamma(n) = (n-1)!\r$$\rואכן, פונקציית גמא מכלילה את העצרת (בהזזה של 1)!\nחלק 7: על קצה המזלג, למה פונקציית גמא היא הפונקציה הכי מוצלחת - משפט בוהר-מולרופ (החלק הזה כולל כמה קללות מתחום תורת הפונקציות המרוכבות)\nההכללה של העצרת על ידי פונקציית גמא נראית כך:\nבמובנים של מה שאמרנו בחלק 4:\nקודם כל, יש פה נוסחה אחידה, ולא נוסחה שונה לכל קטע.\nדבר שני, פונקציית גמא היא אכן רציפה ואך גזירה אינסוף פעמים. ההוכחה לכך די קלה, אך חורגת ממה שרציתי לכלול בפוסט.\nדבר שלישי, יותר מכך שפונקציית גמא היא גזירה אינסוף פעמים - היא גם אנליטית-ממשית. למעשה, היא ניתנת להמשכה אנליטית לכל המישור המרוכב פרט לקטבים פשוטים בשלמים האי-חיוביים, והיא לא מתאפסת, כך שההופכית שלה היא פונקציה שלמה.\nאם כן, נוכל להכריז עליה כפונקציה המוצלחת ביותר אם היא היחידה שמכלילה את העצרת למשל באופן שניתן להמשכה מרומורפית למישור כולו.\nלמרבה הצער היא לא הפונקציה האנליטית היחידה שמכלילה את העצרת.\nזה נובע מכך שיש פונקציות אנליטיות שמתאפסות בכל הטבעיים (למשל, סינוס, עם כופל מתאים בפרמטר) ואז, אם מוסיפים אותן לגמא, זה עדיין אנליטי ועדיין מכליל את העצרת.\nלכן כדי לקבל יחידות, נצטרך להוסיף עוד דרישה. ואכן אפשר לקבל יחידות כזו:\n משפט בוהר*-מולרופ (1922):\nפונקציית גמא היא הפונקציה היחידה שמכלילה את העצרת והיא לוג-קמורה.\n (*בוהר הוא לא בוהר הפיזיקאי הידוע. אבל הוא כן אח שלו.)\nחלק 8: אז כמה זה שמינית עצרת??? אם עקבתם אז אתם יודעים ששמינית עצרת זה בעצם $\\Gamma(1.125)$, וזה שווה בקירוב ל-0.9417426998497015.\n","description":"פוסט מתמטי על איך אפשר להבין את המושג \"שמינית עצרת\".","id":5,"section":"posts","tags":["from facebook","calculus","בעברית"],"title":"!⅛ שמח! 🎉","uri":"https://shorts.yonispants.com/posts/eighth-factorial/"},{"content":"[פוסט זה התפרסם במקור בפייסבוק ואחר כך בלינקדאין.]\nמסיכות זה דבר מאוד חשוב היום. לכן, בקוד שלנו בגארדיקור, יש פונקציה שמקבלת מסיכת רשת משנה (subnet mask) ומחזירה את אורך תחילית CIDR שלה. אבל עזבו רגע מושגים של רשתות: בשפת פשוטי העם, הפונקציה מקבלת מספר 32-ביט, שמורכב מגוש של 1-ים ואחריו גוש של 0-ים (בעצם יש בדיוק 33 קלטים אפשריים כאלה), ומחזירה מספר בין 0 ל-32 שמציין את כמות ה-1-ים.\nלדוגמה, עבור קלט 0x00000000 יוחזר 0, עבור קלט 0xFFFFFFFF יוחזר 32 ועבור קלט 0xFC000000 יוחזר 6.\nאיך עושים את זה באופן יעיל?\nדרך טבעית לממש פונקציה כזו היא בעזרת האצת מעבד.\nבמעבדים רבים אפשר לעשות את זה עם אופקוד אחד, למשל ctz (שעושה count trailing zeroes).\nמעשית, זה הפתרון הטוב ביותר: זה נותן בדיוק את מה שאנחנו רוצים, ואי-אפשר באמת להתחרות בתוכנה עם חישוב שמבוצע בחומרה.\nאבל לפעמים, אין אפשרות להשתמש בהאצת מעבד - למשל, אם המעבד ישן ולא תומך, או שהקומפיילר לא תומך (ונמנעים מאסמבלי), או שהקוד בשפה קצת יותר מדי עילית (כמו פייתון, או גו, או ג\u0026rsquo;אווהסקריפט) ואין בשפה את האפשרות. במקרים כאלה, צריך לממש בתוכנה, כאשר אנחנו מוגבלים לפעולות חשבון ופעולות ביטים בסיסיות בלבד. ואז, צריך להתחיל לחשוב מחשבות אלגוריתמיות, כמו: מה הדרך הטובה ביותר לעשות את זה?\nבזמן שחושבות - נצא לפרסומות אני מגייס לצוות שלי בגארדיקור! אנחנו מפתחים קרנל דרייבר ללינוקס ולווינדוס שכתוב ב-C ומטרתו לחסום חיבורים לפי חוקת ה-firewall שמוגדרת על ידי המשתמש באופן מרכזי, ומחלחלת באופן דינאמי ואוטומטי לכל שרתי הקצה (גם לנוכח שינויים תכופים ברשת).\nהאתגרים הם רבים:\n אנחנו מריצים דרייבר על שרתים קריטיים של לקוחות, ולכן הקוד שלנו חייב להיות ברמת יציבות מקסימלית. פייפליין הטיפול בפקטות נמדד בסקאלה של נאנו-שניות, ולכן הקוד שלנו חייב להיות ברמת יעילות מקסימלית. בנוסף לזה אנחנו מטפלים בבעיות קשות אצל לקוחות - כאלה שבהן הלקוח עולה באש בגלל סיבה לא ברורה, ואנחנו מתחילים מאפס ומהר מאוד מוצאים את עצמנו בתוך הקוד של הקרנל מחפשים את השדה הנכון ב-struct הנכון שאפשר להשתמש בו כדי להציל את המצב.  המשרדים נמצאים בתל אביב (לא שזה משנה כל כך בתקופה הזו\u0026hellip;), גייסנו סה\u0026quot;כ קצת יותר מ-100 מיליון דולר, יש כ-200 עובדים בעולם, אנחנו מוכרים את המוצר כבר כמה שנים, הולך לנו מצויין (גם ב-2020) ואנחנו רוצים להמשיך לגדול. נשמע מעניין לכן או לחבריכם - דברו איתי!\nונחזור לשידורינו אוקי, אז על מה דיברנו? ספירת ביטים ב-subnet mask בלי האופקוד הקסום שעושה את זה בשבילנו.\nכמה מחשבות פשוטות שאולי חשבתם:\n אפשר לעשות לולאה: למשל, להסתכל על הביט התחתון, וכל עוד הוא אפס, לעשות שיפט. אפשר להיעזר בטבלאות lookup: למשל, לעבור בייט-בייט (יש סה\u0026quot;כ 4\u0026hellip;), וכשנתקלים בבייט שאינו אפס, לבדוק בטבלה (למשל בגודל 255) שיש בה את התשובה ללא חישוב נוסף.  אז איך זה ממומש אצלנו בקוד? ובכן, ככה:\n1 2 3 4 5  table = [0, 5, 9, 30, 6, 31, 32, -1, 14, 13, 24, 12, 27, 23, 18, 11, -1, 26, 20, 22, 3, 17, 1, 10, 7, -1, 15, 25, 28, 19, -1, 21, 4, 2, 8, 16, 29] return table[mask % 37]   במילים אחרות, אנחנו לוקחים את המסיכה, מחשבים את השארית שלה מודולו\u0026hellip;.. 37 (???), ואז מביאים את התשובה מטבלה סטטית קטנה.\nאת האלגוריתם (שאותו אסביר בהמשך הפוסט) פיתחנו אצלי בצוות, בהשראת אחד האלגוריתמים מהאתר של Sean Eron Anderson ממעבדת הגרפיקה הממוחשבת באונ' סטאנפורד (חפשו Mod37).\nהאלגוריתם של הבחור מסטאנפורד נותן מימוש כללי של \u0026ldquo;ctz\u0026rdquo;, שזה יותר ממה שאנחנו צריכים. אנחנו פישטנו וייעלנו אותו קצת על ידי ניצול העובדה שהקלט אצלנו הוא רק subnet mask, ולא כל קלט אפשרי.\nלמיטב ידיעתי אף אחד אחר לא מימש את הפתרון הספציפי הזה לבעיה הזו עם subnet mask (חיפשתי קטעים מהטבלה בגוגל ולא מצאתי תוצאות), ולכן אני חושב שזו אדפטציה מקורית שלנו 🙂\nמה לעזאזל? העקרון הבסיסי מוכר ופשוט: מדובר על hash table!\nפונקציית ה-\u0026ldquo;hash\u0026rdquo; כאן היא מודולו 37, והטבלה, שגודלה בדיוק 37, מכילה את 33 התשובות (מ-0 עד 32), ועוד ארבעה \u0026ldquo;מינוס-אחדים\u0026rdquo; שמציינים \u0026ldquo;כניסה ריקה\u0026rdquo;.\nאבל בבירור זה לא כל הסיפור. מסתתר פה קסם:\nב-hash table, אנחנו מצפים לראות התנגשויות\u0026hellip; הרבה התנגשויות!\nאם ה-hash פונקציה מערבבת אקראית סבירה ולגיטימית, אנחנו נצפה לפחות להתנגשות אחת בסיכוי טוב, ברגע ש-\u0026ldquo;ממלאים אותה\u0026rdquo; בכמות ערכים שהיא בערך שורש כמות הכניסות (כלומר, 6) - זה נובע מ-\u0026quot;פרדוקס יום ההולדת\u0026quot;.\nאבל כאן הטבלה מלאה, עם 33 ערכים, ולא התבלבלתם - אין פה קוד טיפול בהתנגשויות - כי אין התנגשויות בכלל!\nאז איך הקסם הזה קורה? ומאיפה מגיע המספר 37? כדי להבין, נעזוב את עולם הקוד ונעבור לעולם המתמטיקה.\nמבוא מזורז למתמטיקה הרלוונטית לאורך הדיון המתמטי, נסכים ש-$p$ הוא מספר ראשוני כלשהו (למעלה דיברנו על המספר הראשוני $p=37$, אבל עכשיו נדבר על ראשוני כללי).\nטענה א': בהכרח קיים מספר $a$ שנקרא \u0026ldquo;שורש פרימיטיבי מודולו $p$\u0026rdquo; (אולי יש יותר מאחד כזה - הטענה היא שקיים לפחות אחד).\nהמשמעות של זה: זהו מספר, שאם נסתכל על החזקות שלו מ-$0$ עד $p-2$, מודולו $p$:\n$$\r\\begin{aligned}\ra^0 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 1 \\\\\ra^1 \u0026 \\thinspace\\operatorname{mod}\\thinspace p \\\\\ra^2 \u0026 \\thinspace\\operatorname{mod}\\thinspace p \\\\\ra^3 \u0026 \\thinspace\\operatorname{mod}\\thinspace p \\\\\r\u0026 \\vdots \u0026 \\\\\ra^{p-2} \u0026 \\thinspace\\operatorname{mod}\\thinspace p\r\\end{aligned}\r$$\rאז התוצאות יהיו כולן שונות זו מזו. (הערה: כאן אני משתמש בסימן $\\operatorname{mod}$ \u0026ldquo;כאופרטור\u0026rdquo; כמקובל במדעי המחשב ולא כשקילות כפי שמקובל במתמטיקה.)\nדוגמה ראשונה - האם 2 הוא שורש פרימיטיבי מודולו 5? נקח את הראשוני $p=5$. האם המספר $a=2$ הוא שורש פרימיטיבי מודולו $5$?\nצריך לבדוק חזקות מ-$0$ עד $3$ (שהוא $p-2$).\n$$\r\\begin{aligned}\ra^0 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 1 \\\\\ra^1 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 2 \\thinspace\\operatorname{mod}\\thinspace 5 = 2 \\\\\ra^2 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 4 \\thinspace\\operatorname{mod}\\thinspace 5 = 4 \\\\\ra^3 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 8 \\thinspace\\operatorname{mod}\\thinspace 5 = 3\r\\end{aligned}\r$$\rכן! כל החזקות שונות, ולכן $2$ הוא שורש פרימיטיבי מודולו $5$.\rדוגמה שנייה - האם 2 הוא שורש פרימיטיבי מודולו 7? עכשיו נקח את הראשוני $p=7$. האם המספר $a=2$ הוא שורש פרימיטיבי מודולו $7$?\n$$\r\\begin{aligned}\ra^2 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 4 \\thinspace\\operatorname{mod}\\thinspace 7 = 4 \\\\\ra^5 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 32 \\thinspace\\operatorname{mod}\\thinspace 7 = 4\r\\end{aligned}\r$$\rלא! החזקה $a^2$ שווה לחזקה $a^5$, ולא צריך לבדוק עוד.\rדוגמה שלישית - האם 3 הוא שורש פרימיטיבי מודולו 7? אבל האם $a=3$ הוא שורש פרימיטיבי מודולו $7$? צריך לבדוק חזקות מ-$0$ עד $5$ (שהוא $p-2$).\n$$\r\\begin{aligned}\ra^0 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 1 \\\\\ra^1 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 3 \\thinspace\\operatorname{mod}\\thinspace 7 = 3 \\\\\ra^2 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 9 \\thinspace\\operatorname{mod}\\thinspace 7 = 2 \\\\\ra^3 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 27 \\thinspace\\operatorname{mod}\\thinspace 7 = 6 \\\\\ra^4 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 81 \\thinspace\\operatorname{mod}\\thinspace 7 = 4 \\\\\ra^5 \u0026 \\thinspace\\operatorname{mod}\\thinspace p = 243 \\thinspace\\operatorname{mod}\\thinspace 7 = 5\r\\end{aligned}\r$$\rכן!\nלא אוכיח כאן את טענה א'. ההוכחה נמצאת בכל קורס בסיסי בתורת החבורות, ומי שמעוניינת בה מוזמנת גם לדון בתגובות 🙂\nטענה ב': $2$ הוא שורש פרימיטיבי מודולו $37$.\n(הדרך הכי קלה שאני מכיר להוכיח את זה היא פשוט לבדוק במחשב את כל 36 החזקות.)\nמסקנה: כל החזקות של $2$, מ-$2^0$ עד $2^{32}$ (למעשה אפילו מ-$2^0$ עד $2^{35}$), נותנות תוצאות שונות זו מזו מודולו $37$!\nאיך מגיעים מכאן למה שרצינו? טענה ג': כל subnet mask הוא פשוט $2^{32}$ פחות חזקה כלשהי של $2$. (תרגיל לקורא.)\nמטענה ג', אפשר לכתוב\n$$m = c - q$$\rכאשר $c$ הוא קבוע אבסולוטי ($c=2^{32}$), ו-$q$ הוא חזקה כלשהי של $2$ בין $2^0$ ל-$2^{32}$.\nלכן המשוואה הזו מתקיימת גם באופן מודולרי:\n$$m \\thinspace\\operatorname{mod}\\thinspace 37 = (c - q) \\thinspace\\operatorname{mod}\\thinspace 37$$\rלכן, אם $q \\thinspace\\operatorname{mod}\\thinspace 37$ כולם שונים זה מזה (טענה ב'), אז גם $m \\thinspace\\operatorname{mod} 37$ כולם שונים זה מזה! (מש\u0026quot;ל.)\nאפשר לחפור עוד קצת ולהגיע לבעיה לא פתורה במתמטיקה? ברור!!! אז ככה:\nכל מה שעשינו למעלה טוב ל-IPv4, שם הכתובות (והמסיכות) הן בגודל 32 ביט.\nאבל מה קורה ב-IPv6? שם הכתובות (והמסיכות) הן בגודל 128 ביט. מה נעשה אז?\nנעיין ב-OEIS, אנציקלופדיית סדרות המספרים, ונראה לאיזה ראשוניים $p$ אחרים מתקיימת \u0026ldquo;טענה ב'\u0026rdquo; (כלומר $2$ הוא שורש פרימיטיבי מודולו $p$).\nאנחנו מחפשים משהו שיותר גדול מ-128. ואכן, כתוב באנציקלופדיה ש-131 הוא סבבה לנו. אז אפשר לקחת את מסיכת ה-IPv6, לעשות לה מודולו 131, ולהביא את התוצאה מטבלה בגודל 131 שנבנתה לבעיה.\nומה עם\u0026hellip; IPv8?\nאז IPv8 לא קיים עדיין, אני חושב, אבל אני עושה אקסטרפולציה: אם ב-IPv4 יש כתובות בגודל 32 ביט, וב-IPv6 יש כתובות בגודל 128 ביט, אז ב-IPv8 יש כמובן\u0026hellip; כתובות בגודל 512 ביט.\nגם עבור IPv8 אפשר לעיין באנציקלופדיה ולראות שהראשוני המתאים הוא 523.\nומה לגבי IPv10? ו-IPv12? ובאופן כללי, IPvK (גרסת IP שבה יש $2^{K+1}$ ביטים בכל כתובת)?\nכדי לפתור את הבעיה עבורם, נצטרך למצוא מספרים ראשוניים גדולים יותר ויותר שמקיימים את \u0026ldquo;טענה ב'\u0026rdquo;, כלומר ש-$2$ הוא שורש פרימיטיבי עבורם.\nהאם נצליח? אנחנו לא יודעים:\nהשערת ארטין (1927): יש אינסוף ראשוניים ש-$2$ הוא שורש פרימיטיבי עבורם.\nאם השערת ארטין נכונה, אז תמיד יהיה ראשוני שיאפשר לנו לעשות את הטריק הזה גם עבור מסיכות מאוד גדולות.\nאם לא, אז החל מגודל מסויים (כנראה מאוד גדול) זה יהיה בלתי אפשרי, ונצטרך למצוא אלגוריתם אחר.\nהשאלה הזו כאמור לא פתורה, והחודש היא תחגוג 93 שנים מאז שהיא נשאלה.\n","description":"על מסיכות, רשתות, ביטים, מעבדים, אלגוריתמים, טבלאות hash, טעימה מתורת החבורות, מספרים ראשוניים, בעיות לא פתורות במתמטיקה, והצעת עבודה בצוות שלי.","id":6,"section":"posts","tags":["from facebook","low level","networks","prime numbers","algorithms","Guardicore","בעברית"],"title":"קצת על חישוב אורך תחילית subnet","uri":"https://shorts.yonispants.com/posts/subnet-mask-prefix-length/"},{"content":"[פוסט זה התפרסם במקור בפייסבוק.]\nמאמר שהתפרסם בשבוע שעבר1: \u0026ldquo;אנו מוכיחים שוריאציה מסויימת של בעיית המלכות על לוח שחמט בגודל $n \\times n$ היא NP-שלמה\u0026rdquo;.\nהודעת האוניברסיטה לתקשורת: \u0026ldquo;קיים פרס של מיליון דולר ממכון קליי בארה\u0026quot;ב על בעיית P שונה מ-NP, ולכן מי שיכול להוכיח שבעיית המלכות ניתנת או לא ניתנת לפתרון יעיל, יזכה בפרס.\u0026rdquo;\nכתבה ב-ynet: \u0026ldquo;מדענים באוניברסיטת סנט אנדרוז שבסקוטלנד הציבו אתגר בפני טובי המתכנתים: גלו פתרון לחידת שחמט \u0026ldquo;פשוטה\u0026rdquo; – וזכו במיליון דולר. החידה דורשת מהשחקן למקם בלוח שחמט רגיל ($8 \\times 8$) שמונה מלכות, כך שאף מלכה לא מאיימת על האחרת.\u0026rdquo;\nיד, ברוכה הבאה לפרצוף.\n(הערה: האשמה היא של הודעת האוניברסיטה לתקשורת כמעט באותה רמה כמו שהיא של ynet)\n\r// Convert footnote to LTR\rdocument.addEventListener('DOMContentLoaded', function() {\rvar fn = document.getElementById('fn:1');\rfor (var i = 0; i  Gent, Ian P., Christopher Jefferson, and Peter Nightingale. \u0026ldquo;Complexity of n-Queens Completion.\u0026rdquo; Journal of Artificial Intelligence Research 59 (2017): 815-848.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","description":" ","id":7,"section":"posts","tags":["from facebook","the media is stupid","ynet","בעברית"],"title":"מאמר שהתפרסם בשבוע שעבר...","uri":"https://shorts.yonispants.com/posts/an-article-from-last-week/"},{"content":"You\u0026rsquo;ve reached Yoni Rozenshein\u0026rsquo;s blog.\nCredits and attributions Shorts designed by Icongeek26 from www.flaticon.com.\nSome emojis designed by OpenMoji – the open-source emoji and icon project. License: CC BY-SA 4.0.\n","description":"About this blog.","id":8,"section":"","tags":null,"title":"About","uri":"https://shorts.yonispants.com/about/"}]