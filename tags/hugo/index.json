[{"content":"For this blog, I chose Hugo. The reason I chose Hugo is that that\u0026rsquo;s what Shay Nehmad is using. ü§∑\nHugo is a static site generator, which means the site is not served by a server which runs code (like Wordpress) - instead, it\u0026rsquo;s served by a server which serves static files only. I write new posts in Markdown format, and then I use Hugo to rebuild the site.\nIn my experience, using Hugo is not as straightforward as using traditional blogging platforms (like Wordpress), and you do need to have some coding experience. I\u0026rsquo;ve had to learn some things about how Hugo works in order to develop this blog. I\u0026rsquo;ve even learned about Git submodules! üòÅ\nI got started by reading Shay\u0026rsquo;s post, \u0026ldquo;How to Build This Blog\u0026rdquo;. Then, I looked at Hugo\u0026rsquo;s theme library, and chose the theme Zzo.\nIn Hugo, you are kind of married to the theme you choose. Once I chose Zzo, I had to set up a lot of Zzo-specific configuration. Besides reading the documentation of the theme and of Hugo itself, another trick that proved useful was to look at the templates/partials themselves (in the Zzo source code) to figure out what site element is controlled by what configuration.\nIn addition to configuration, I\u0026rsquo;ve had to change some behavior / fix bugs in Zzo itself. To do this, I\u0026rsquo;ve forked the Zzo repo, made the changes there, and opened a few pull requests to contribute the fixes back upstream. I\u0026rsquo;ve detailed an example below:\n\u0026ldquo;Reading time\u0026rdquo; as \u0026ldquo;Shorts Size\u0026rdquo; By default, Zzo shows the reading time like this:\n ‚òï 5 min read\n Instead of this, suppose that we want to have:\n ü©≥ Size M\n Step 1: Finding where things are Even without knowing anything about the code, we know that the string \u0026quot;min read\u0026quot; must be referenced somewhere. Looking for it in the entire source code of the theme, we find it in the file i18n/en.toml:\n1 2  [reading-time] other = \u0026#34;min read\u0026#34;   This tells us it\u0026rsquo;d be a good idea to search for \u0026quot;reading-time\u0026quot;, and indeed, we find it in 4 places:\n layouts/partials/body/infos.html layouts/partials/summary/card.html layouts/partials/summary/classic.html layouts/partials/summary/compact.html  These 4 places correspond to all four ways that the reading time may be shown: Inside a page, or in 3 different styles of page summaries.\nStep 2: Fixing the theme The code which refers to \u0026quot;reading-time\u0026quot; looks like this:\n{{ .ReadingTime }} {{ i18n \u0026quot;reading-time\u0026quot; }}\rWe see that it is hardcoded in the template that the number appears before the string. That\u0026rsquo;s no good for us - we want the number to be a parameter for the \u0026quot;reading-time\u0026quot; string. Fortunately, Hugo can do this - and it is even a standard example in the documentation. Basically, you pass it as a parameter like this:\n{{ i18n \u0026quot;reading-time\u0026quot; .ReadingTime }}\rAnd modify the i18n string like this:\n1 2  [reading-time] other = \u0026#34;{{ .Count }} min read\u0026#34;   With this knowledge, I made the necessary changes and submitted a pull request.\nBy the way, while we\u0026rsquo;re looking at these partials, we can see where the ‚òï emoji comes from:\n{{ ($.Site.Params.readingTimeIcon | safeHTML) | default \u0026quot;‚òï\u0026quot; }}\rThis indicates we can control the emoji by changing the readingTimeIcon site configuration, which indeed appears in Zzo\u0026rsquo;s sample params.toml file.\nStep 3: Defining the string After reading some more documentation (this time it\u0026rsquo;s of Go\u0026rsquo;s template package), I was ready to define the string. To do this, I had to define my own i18n/en.toml. The way Hugo works is it evaluates the site\u0026rsquo;s files first, and at the theme\u0026rsquo;s files afterwards; so I just created this path and file in the root of my site.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  [tooltip-reading-time] other = \u0026#34;Shorts Size\u0026#34; [reading-time] other = \u0026#34;Size \\ {{ if eq .Count 1 }} \\ XS \\ {{ else if eq .Count 2 3 }} \\ S \\ {{ else if eq .Count 4 5 6 }} \\ M \\ {{ else if eq .Count 7 8 9 10 }} \\ L \\ {{ else }} \\ XL \\ {{ end }}\u0026#34;   And that\u0026rsquo;s it - this finally achieves what we wanted.\n","description":"How I built this blog using Hugo.","id":0,"section":"","tags":["Hugo","Yoni's Shorts"],"title":"How to Build This Blog","uri":"https://shorts.yonispants.com/how-to-build-this-blog/"},{"content":"Hello, world. Starting a new blog today!\nWhy blog?  I already publish a bunch of stuff on my Facebook profile, and wished that my posts get a home of their own. I feel like it. I had an unsuccessful Wordpress blog in 2007-2008, and want to try to make it better this time.  What blog? I plan on posting:\n Math stuff. Programming \u0026amp; technology stuff. Projects and stuff. Stuff I\u0026rsquo;ll copy from my past posts on Facebook.  Arbitrarily, some posts will be in English, and some in Hebrew.\nHow blog? For this blog, I chose Hugo. The reason I chose Hugo is that that\u0026rsquo;s what Shay Nehmad is using. ü§∑\nI\u0026rsquo;ll write more about it in my next post.\n","description":"Hello, world. Starting a new blog today!","id":1,"section":"","tags":["Yoni's Shorts","Hugo"],"title":"Hello, world","uri":"https://shorts.yonispants.com/hello/"},{"content":"You\u0026rsquo;ve reached Yoni Rozenshein\u0026rsquo;s blog.\nCredits and attributions Shorts designed by Icongeek26 from www.flaticon.com.\nSome emojis designed by OpenMoji ‚Äì the open-source emoji and icon project. License: CC BY-SA 4.0.\n","description":"","id":2,"section":"","tags":null,"title":"About","uri":"https://shorts.yonispants.com/about/"}]